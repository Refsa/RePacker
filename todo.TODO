Version 2.0.0:
    - test cases for SizeOf with Classes as base type
    - ValueTuple with TRest value (8th generic argument)
    
- clean up the csproj files
- clean up test cases
- clean up benchmarks
- make ILogger support object and formatting
- prepend/append to allow for circular buffer functionality
- fix some of the exception stuff that is handled internally, mostly related to library development pains

- implement more tests according to results from dotCover report

- make a parameter for [RePacker] attribute as a toggle between either skipping or including fields/properties marked with [RePack]

Base Serializer:
    - ISet<T>

Ideas:
    - Meta data? insert version, type name, etc.
        Should move this to user settings so they can be toggled on/off for better performance
        The cost of inserting a header is fairly low though, so might be worth it

Archive:
  ✔ clean up generators for collecitons @done(21-03-07 11:10) @project(Version 2.0.0)
  ✔ change dictionary generator to pack as KeyValuePair collection instead of two separate lists, as done in DictionaryPacker @done(21-03-07 11:02) @project(Version 2.0.0)
  ✔ SizeOfColleciton typo @done(21-03-07 10:52) @project(Version 2.0.0)
  ✔ Rename Buffer to ReBuffer to avoid collision with System.Buffer @done(21-03-07 10:51) @project(Version 2.0.0)
  ✔ make Buffer be packable @done(21-03-07 10:45) @project(Version 2.0.0)
  ✔ update with new changes to Buffer (removal of BoxedBuffer) @done(21-03-07 07:00) @project(Readme)
  ✔ info on SizeOf @done(21-03-07 07:00) @project(Readme)
  ✔ info on auto-expand for Buffer @done(21-03-07 07:00) @project(Readme)
  ✔ add info about StructLayout on untagged and blittable structs @done(21-03-07 07:00) @project(Readme)
  ✔ ability to check if a managed object fits the buffer @done(21-03-05 12:26)
  ✔ alternative mode where the buffer grows/shrinks to fit the data @done(21-03-05 12:25)
  ✔ rename MemoryCopyFromUnsafe/MemoryCopyToUnsafe to something more sensible @done(21-03-04 12:16)
  ✔ At this point the Buffer struct could be removed all together and instead move functionality into an extensions class for BoxedBuffer @done(21-03-04 12:16)
  ✘ Add a IPacker<T> work as an override for serialization @cancelled(21-02-23 14:09)
  ✔ move extensions methods out of the RePacker.Builder namespace @done(21-02-23 10:30)
  ✔ unroll the last serialization if the entire object didnt fit @done(21-02-23 09:54)
  ✔ ICollection<T> @done(21-02-22 16:31) @project(Base Serializer)
  ✔ test cases for filling a buffer of large size with all primitive types @done(21-02-22 16:31)
  ✔ missing null handling when packing/unpacking @done(21-02-22 16:31)
  ✘ Figure out a way around using BoxedBuffer for IL generated stuff, not a huge deal since buffers should be pooled @cancelled(21-02-21 18:01)
  ✔ remove IEnumerableType stuff @done(21-02-21 18:01)
  ✔ Multi-dim arrays @done(21-02-21 14:03) @project(Base Serializer)
  ✘ remove all the custom unmanaged packers on Buffer since Pack/Unpack has the same performance characteristics @cancelled(21-02-21 10:07)
  ✔ BuildCustomWrappers using RePackerWrapper needs to define a "direct copyable" field @done(21-02-21 10:07)
  ✔ Clean up how typeCache in TypeCache is setup @done(21-02-20 15:25)
  ✔ make root of namespace be just RePacker @done(21-02-20 09:06)
  ✔ Clean up interfacing with Buffer in Serializer.cs @done(21-02-20 08:16)
  ✔ More efficient lookup of types on serialization @done(21-02-20 08:16)
  ✔ generic producers currently doesnt support multi-threading @done(21-02-20 08:16)
  ✔ pushing values into Buffer when it's large and filled is slow @done(21-02-20 08:17)
  ✔ Remove generated logger stuff @done(21-02-20 08:16) @project(CR)
  ✔ Nullabel<T> @done(21-02-20 08:10) @project(Base Serializer)
  ✔ cache AppDomain type lookup in TypeCache @done(21-02-15 11:09)
  ✔ Allow Identifier attribute to control ordering @done(21-02-14 14:58)
  ✔ KeyValuePair<K, V> @done(21-02-14 14:56) @project(Base Serializer)
  ✔ Tuples @done(21-02-14 14:56) @project(Base Serializer)
  ✔ Clean up project structure making proper sub-projects for everything @done(21-02-02 06:44)
  ✔ Clean up the IL and code gen mess in SerializerBuilder.cs @done(21-02-02 09:04)
  ✔ Remove ReadOnlyBuffer altogether? @done(21-02-02 06:48)
  ✔ IEnumerable<T> @done(21-02-02 14:20) @project(Base Serializer)
  ✔ IList<T> @done(21-02-02 14:20) @project(Base Serializer)
  ✔ IDictionary<K, V> @done(21-02-02 16:03) @project(Base Serializer)
